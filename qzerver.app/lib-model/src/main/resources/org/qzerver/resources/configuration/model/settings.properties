# -----------------------------------------------------------------------------
#
# General options
#
# -----------------------------------------------------------------------------

# Visible application name
app.name = QZERVER job scheduler

# The name of the current node
app.host = #{T(java.net.InetAddress).getLocalHost().getHostName()}

# How is the application root is visible from the other world (used for links in
# email messages and other absolute links)
app.url = http://${app.host}:5333

# Development mode (more logging, stacktrace output and more)
app.development = false

# -----------------------------------------------------------------------------
#
# Folders
#
# -----------------------------------------------------------------------------

# Directory for temporary files
app.folder.tmp = ${java.io.tmpdir}

# -----------------------------------------------------------------------------
#
# Database options
#
# -----------------------------------------------------------------------------

# Type of the database - used for simple database settings with #{dbConfigurator}
# see details in org.qzerver.system.db.configurator.DbConfiguratorType
#
# Available values are:
#   - CUSTOM
#   - HSQLDB (JDBC driver is included)
#   - MYSQL_INNO (JDBC driver is included)
#   - POSTGRES (JDBC driver is included)
#   - FIREBIRD (JDBC driver is included)
#   - DERBY_EMBEDDED (JDBC driver is included)
#   - DERBY_CLIENT (JDBC driver is included)
#   - INTERBASE
#   - ORACLE8I
#   - ORACLE9I
#   - ORACLE10G
#   - ORACLE11G
#   - MSSQL2005
#   - MSSQL2008
app.database.type = DERBY_EMBEDDED

# Fully qualified JDBC url
app.database.url = jdbc:derby:${QZERVER_DB}/derby/qzerver;create=true

# DB user
app.database.username = qzerver

# DB password
app.database.password = qzerver

# DB schema name (set schema name if DB supports schemas, otherwise set #{null} value)
app.database.schema = #{null}

# JDBC driver class (subclass of java.sql.Driver)
app.database.driver.class = #{dbConfigurator.jdbcDriver}

# Drop all database objects when program started (for development and tests only)
app.database.autodrop = false

# Allow the program to autoupdate database object (with Liquidbase)
app.database.autoupdate = true

# Log all SQL statements (set DEBUG level for 'com.jolbox.bonecp' logger)
app.database.logging = false

# -----------------------------------------------------------------------------
#
# Database pool options
#
# see the following url for details - http://jolbox.com/configuration.html
#
# -----------------------------------------------------------------------------

# How many partitions are created
app.database.pool.partition.count = 3

# What is the minimum connection count for each partition
app.database.pool.partition.min = 2

# What is the maximum connection count for each partition
app.database.pool.partition.max = 20

# Test SQL query
app.database.pool.sql.probe = #{dbConfigurator.testSQLQuery}

# Maximum connection age in seconds
app.database.pool.connection.age.sec = 3600

# Connection timeout in milliseconds
app.database.pool.connection.timeout.ms = 3000

# -----------------------------------------------------------------------------
#
# Mail settings
#
# see the following url for details and settings of Java Mail API
# http://javamail.kenai.com/nonav/javadocs/javax/mail/package-summary.html#package_description
#
# -----------------------------------------------------------------------------

# Whether mailing is enabled (if true check all other mail settings are correct)
app.mail.enabled = false

# Mail server domain
app.mail.server = smtp.mailserver.example.org

# Mail server port
app.mail.port = 25

# Mail username
app.mail.username = username

# Mail password
app.mail.password = password

# What is the email address of the sender
app.mail.email.from = username@mailserver.example.org

# What is the email address of the recepient
app.mail.email.to = admin@yourcompany.example.org

# What is mail protocol (SMTP by default)
app.mail.transport.protocol = smtp

# Whether authentication is required
app.mail.smtp.auth = false

# Whether STARTTLS authentication is required
app.mail.smtp.starttls.enable = false

# Connection timeout in milliseconds
app.mail.smtp.connectiontimeout.ms = 30000

# Read timeout in milliseconds
app.mail.smtp.timeout.ms = 180000

# How to load mail templates
app.mail.templates.resource = classpath:/

# Prefix for a short template name
app.mail.templates.prefix = org/qzerver/resources/configuration/model/freemarker/mail/

# -----------------------------------------------------------------------------
#
# Hibernate options and settings (with 'app.' prefix)
#
# -----------------------------------------------------------------------------

# Dialect class for Hibernate (subclass of org.hibernate.dialect.Dialect)
app.hibernate.dialect.class = #{dbConfigurator.hibernateDialect}

# Hibernate 'hibernate.show_sql' setting
app.hibernate.show_sql = false

# Hibernate 'hibernate.format_sql' setting
app.hibernate.format_sql = false

# Hibernate 'hibernate.use_sql_comments' setting
app.hibernate.use_sql_comments = true

# Hibernate 'hibernate.order_inserts' setting
app.hibernate.order_inserts = true

# Hibernate 'hibernate.order_updates' setting
app.hibernate.order_updates = true

# Hibernate 'hibernate.cache.use_second_level_cache' setting
app.hibernate.cache.use_second_level_cache = false

# Hibernate 'hibernate.cache.use_query_cache' setting
app.hibernate.cache.use_query_cache = false

# Hibernate 'hibernate.hbm2ddl.auto' setting
app.hibernate.hbm2ddl.auto = none

# Hibernate 'hibernate.id.new_generator_mappings' setting
app.hibernate.id.new_generator_mappings = #{dbConfigurator.newGeneratorType}

# -----------------------------------------------------------------------------
#
# Quartz settings
#
# -----------------------------------------------------------------------------

# Start Quartz scheduler automatically
app.quartz.start.auto = true

# Wait for all tasks while shutdowning
app.quartz.shutdown.wait = true

# Size of execution threads pool
app.quartz.thread.count = 20

# Default thread priority
app.quartz.thread.priority = 5

# What is the tolerance for misfiring (milliseconds)
app.quartz.misfire.threshold.ms = 60000

# How often to check DB for other Quartz instance states (milliseconds)
app.quartz.cluster.checkin.ms = 30000

# Quartz DB delegate class (subclass of org.quartz.impl.jdbcjobstore.DriverDelegate)
app.quartz.jdbc.delegate = #{dbConfigurator.quartzAdapter}

# -----------------------------------------------------------------------------
#
# Default application settings
#
# -----------------------------------------------------------------------------

# Default locale for the application (specify #{null} to use default system locale)
app.forced.default.locale = #{null}

# Default time zone fot the application (specify #{null} to use default system time zone)
app.forced.default.timezone = #{null}

# -----------------------------------------------------------------------------
#
# View settings
#
# -----------------------------------------------------------------------------

# Locale for rendering all views and letters (specify #{T(java.util.Locale).getDefault().toString()} to use default
# application locale).
app.view.locale = #{T(java.util.Locale).getDefault().toString()}

# Timezone for rendering all letters (specify #{T(java.util.TimeZone).getDefault.getId()} us use default
# application time zone)
app.view.timezone = #{T(java.util.TimeZone).getDefault.getId()}

# -----------------------------------------------------------------------------
#
# Action settings
#
# -----------------------------------------------------------------------------

# Maximum output capture size in bytes
app.action.capture.size.max = 50000